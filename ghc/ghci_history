:q
putStrLn $ showPascals 10
showPascals 10
showPascals 100
take 100 pascals
evaluation 1000
evaluation 10
take 100 pascals
pascals
:l Main.hs 
pascals
360-140
180-320
320
cos lambda2
lambda2
let lambda2 = 2*pi-acos(theta)
cos lambda1
lambda1
let lambda1 = acos(theta)
let lambda1 = aros(theta)
let lambda1 = arccos(theta)
theta
let theta=(1-0.5)/2
:q
2^10-1
sum (map (2^) [0..9])
sum (map (2^) [1..10])
sum (map (^2) [1..10])
:q
pascals
:l Main.hs 
:q
192*2
:q
16*12
:q
:q
sqrt 256
:q
:q
16**2
(3+ ( cos 4 ) - (cos 2))/2 + (log 2) + (7/8)*(1-2**(8/7))
19/8 + log 2 - (7/4) * (2**(1/7)) + (cos 4) / 2 - (cos 2) / 2
19/8 + log 2 - (7/4) * (2**(1/7)) + (cos 4) / 2 - (cos 2) / 2
19/8 + log 2 - (7/4) * 2**(1/7) + (cos 4) / 2 - (cos 2) / 2
19/8+log 2 - (7/4)*2^(1/7)+ (cos 4) / 2 - (cos 2) / 2
log 2.728
log 2.781
log 2.78
log 3
log e
log 2
19/8+ln 2
putStr $ showPascals 24
"Hello, World!"
1
"Hello, World!"
"Hello, World!\n"
"Hello, World!"
putStr $ showPascals 24
showPascals 24
take 24 $ pascals
pascals
putStr $ evaluation 4
putStr $ evaluation 3
putStr $ evaluation 10
putStr $ showPascals 10
putStr $ showPascals 10
evaluation 10
evaluation 24
putStr $ showPascals 24
putStr "Hello"
putStr $ showPascals 24
putStr $ showPascals 24
putStrLn $ showPascals 24
putStrLn $ showPascals 24
putStrLn $ showPascals 29
showPascals 29
showPascals 100
:l Main.hs 
:q
:r
:q
putStr $ showPascals 24
putStr $ showPascals 24
putStr $ showPascals 25
putStr $ showPascals 30
putStr $ showPascals 39
putStr $ showPascals 20
putStr $ showPascals 100
putStr $ showPascals 10
putStr $ showPascals 5
:r
putStr $ showPascals 5
putStrLn $ showPascals 5
:r
putStrLn $ showPascals 5
showPascals 5
:r
